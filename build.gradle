buildscript {
  ext {
    springBootVersion = '1.4.3.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('se.transmode.gradle:gradle-docker:1.2')
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

// defined the following so that /coding-config-server/info endpoint displays useful info
group = 'com.coding'
version = '0.0.2'

jar {
  baseName = 'coding-config-server'
  version = version
}

description = """coding config server"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

repositories {
  mavenCentral()
}

springBoot {
  buildInfo()
}   

dependencies {
  compile('org.springframework.boot:spring-boot-starter-data-jpa')  // automatic get a dependency to "tomcat-jdbc"
  compile('org.springframework.boot:spring-boot-starter-data-rest')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile('org.springframework.security:spring-security-test:4.1.3.RELEASE')
  compile('org.springframework.boot:spring-boot-starter-web')
  compile("org.springframework.boot:spring-boot-devtools")

  compile('io.springfox:springfox-swagger-ui:2.6.1')
  compile('io.springfox:springfox-swagger2:2.6.1')

  compile("org.apache.commons:commons-lang3:3.5")
  compile("joda-time:joda-time:2.9.7")

  runtime('mysql:mysql-connector-java')
	
  testCompile('org.hsqldb:hsqldb:2.3.4')
  testCompile('org.dbunit:dbunit:2.5.3')
  testCompile("com.github.springtestdbunit:spring-test-dbunit:1.3.0")
  testCompile('org.springframework.boot:spring-boot-starter-test')

}

// Set tag explicitly.  See README.md for more detail
//ext.dockerGroup = 'com.coding'
ext.dockerTag = version

task buildDocker(type: Docker, dependsOn: build) {
  push = false
  project.group = project.findProperty("dockerGroup")
  tagVersion = project.findProperty("dockerTag")
  dockerfile = file('Dockerfile')
  applicationName = jar.baseName
  applicationName += project.hasProperty("appEnv") ? ( '-' + project.findProperty("appEnv") ) :''
  doFirst {
    // Rename the app jar to "app.jar" so that the Dockerfile does not require renames
    copy {
      from "${project.buildDir}/libs"
      into stageDir
      include "${jar.baseName}-${jar.version}.jar"
      rename("${jar.baseName}-${jar.version}.jar", "coding-config-server-app.jar")
    }
  }
}


eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  }
}